// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum JobRole {
  developer
  tester
  analyst
  other
}

enum BugStatus {
  in_progress
  testing
  fixed
}

model User {
  id        String   @id @default(uuid())
  password  String?
  name      String   @unique
  createdAt DateTime @default(now())
  role      Role     @default(user)
  jobRole   JobRole  @default(other)

  // задачи, где пользователь — СОЗДАТЕЛЬ (владелец)
  tasks Task[]

  // задачи, где пользователь — УЧАСТНИК
  taskMemberships TaskParticipant[]
  HiddenTask      HiddenTask[]

  @@index([name])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  done        Boolean  @default(false)
  createdAt   DateTime @default(now())
  // (опционально) видимость:
  // hidden      Boolean  @default(false)

  // СОЗДАТЕЛЬ/ВЛАДЕЛЕЦ
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // УЧАСТНИКИ
  participants TaskParticipant[]

  // БАГИ
  bugs       Bug[]
  HiddenTask HiddenTask[]

  @@index([userId, createdAt])
  @@index([createdAt])
}

model HiddenTask {
  id       String   @id @default(uuid())
  userId   String
  taskId   String
  hiddenAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Уникальный ключ: один пользователь может скрыть задачу только один раз
  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
}

model TaskParticipant {
  // явная таблица связки: один пользователь — участник одной задачи
  taskId String
  userId String

  // (опционально) роль участника в задаче, если понадобится
  // role   String? // например: "assignee" | "watcher"

  // (опционально) метаданные участия
  addedAt DateTime @default(now())

  // связи
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // составной первичный ключ не даёт добавить одного и того же участника дважды
  @@id([taskId, userId])
  // удобный индекс для выборки «все задачи пользователя-участника»
  @@index([userId])
}

model Bug {
  id          String    @id @default(uuid())
  title       String
  description String
  status      BugStatus @default(in_progress)
  createdAt   DateTime  @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  @@index([taskId, status])
}
